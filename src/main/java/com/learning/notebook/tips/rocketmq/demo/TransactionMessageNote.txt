Producer发送半消息（Half Message）到broker。

Half Message发送成功后开始执行本地事务。
如果本地事务执行成功的话则返回commit，如果执行失败则返回rollback。（这个是在事务消息的回调方法executeLocalTransaction里由开发者自己决定commit or rollback）

如果broker收到了commit/rollback消息 ：

如果收到了commit，则broker认为整个事务是没问题的，执行成功的。那么会下发消息给Consumer端消费。
如果收到了rollback，则broker认为本地事务执行失败了，broker将会删除Half Message，不下发给Consumer端。

如果broker未收到消息（如果执行本地事务突然宕机了，相当本地事务执行结果返回unknow，则和broker未收到确认消息的情况一样处理。）：

broker会定时回查本地事务的执行结果（调用checkLocalTransaction方法）：如果回查结果是本地事务已经执行则返回commit，若未执行，则返回rollback。
Producer端回查的结果发送给Broker。Broker接收到的如果是commit，则broker视为整个事务执行成功，如果是rollback，则broker视为本地事务执行失败，broker删除Half Message，不下发给consumer。
如果broker未接收到回查的结果（或者查到的是unknow），则broker会定时进行重复回查，以确保查到最终的事务结果。重复回查的时间间隔和次数都可配。


RocketMQ通过轮询所有队列的方式来确定消息被发送到哪⼀个队列（负载均衡策略）。

// RocketMQ通过MessageQueueSelector中实现的算法来确定消息发送到哪⼀个队列上
// RocketMQ默认提供了两种MessageQueueSelector实现：随机/Hash
// 当然你可以根据业务实现⾃⼰的MessageQueueSelector来决定消息按照何种策略发送到消息队列中
SendResult sendResult = producer.send(msg, new MessageQueueSelector() {
 @Override
 public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg){
 Integer id = (Integer) arg;
 int index = id % mqs.size();
 return mqs.get(index);
 }
}, orderId);
